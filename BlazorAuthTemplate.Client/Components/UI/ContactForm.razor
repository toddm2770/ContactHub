@using BlazorAuthTemplate.Client.Models.Enums

@inject ICategoryService CategoryService
@if (Contact is not null)
{
	<EditForm Model="Contact" OnValidSubmit="HandleSubmit">
		<DataAnnotationsValidator/>
		<div class="row p-2 g-3">
			<div class="col-12 col-md-4">
				<!--Image-->
				<div class="square-img-container">
					<img src="@(string.IsNullOrEmpty(Contact.ImageURL) ? ImageHelper.DefaultContactImage : Contact.ImageURL )" class="square-img" />
				</div>
				<div>
					<InputFile OnChange="OnFileChange" class="form-control mt-2" accept=".png, .jpg, .jpeg, .svg" />
					<span class="text-danger">@imageError</span>
				</div>
			</div>


			<div class="col-12 col-md-8">
				<div class="row g-2">
				<!--Form Start-->
					<div class="col-12 col-md-6">
						<label for="firstName" class="form-label">First Name</label>
						<InputText @bind-Value="Contact.FirstName" id="firstName" class="form-control" aria-label="First Name" placeholder="First Name" />
						<ValidationMessage For="() => Contact.FirstName" />
					</div>
					<div class="col-12 col-md-6">
						<label for="lastName" class="form-label">Last Name</label>
						<InputText @bind-Value="Contact.LastName" id="lastName" class="form-control" aria-label="Last Name" placeholder="Last Name" />
						<ValidationMessage For="() => Contact.LastName" />
					</div>
					<div class="col-12 col-md-6">
						<label for="email" class="form-label">Email</label>
						<InputText @bind-Value="Contact.Email" id="email" class="form-control" aria-label="Email" placeholder="Email" />
						<ValidationMessage For="() => Contact.Email" />
					</div>
					<div class="col-12 col-md-6">
						<label for="phone" class="form-label">Phone</label>
						<InputText @bind-Value="Contact.PhoneNumber" id="phone" class="form-control" aria-label="Phone Number" placeholder="(xxx)555-5555" />
						<ValidationMessage For="() => Contact.PhoneNumber" />
					</div>
					<div class="col-12">
						<label for="address1" class="form-label">Address</label>
						<InputText @bind-Value="Contact.Address1" id="address1" class="form-control" aria-label="Address" placeholder="123 Fake St." />
						<ValidationMessage For="() => Contact.Address1" />
					</div>
					<div class="col-12">
						<label for="address2" class="form-label">Address 2</label>
						<InputText @bind-Value="Contact.Address2" id="address2" class="form-control" aria-label="Address Line 2" placeholder="Suit 117" />
						<ValidationMessage For="() => Contact.Address2" />
					</div>
					<div class="col-12 col-md-4">
						<label for="city" class="form-label">City</label>
						<InputText @bind-Value="Contact.City" id="city" class="form-control" aria-label="City" placeholder="City" />
						<ValidationMessage For="() => Contact.City" />
					</div>
					<div class="col-12 col-md-4">
						<label for="state" class="form-label">State</label>
						<InputSelect @bind-Value="Contact.State" class="form-select">
						@foreach(var state in Enum.GetValues<State>())
						{
							<option value="@state">
								@state.ToString()
							</option>							
						}
						<ValidationMessage For="() => Contact.State" />
						</InputSelect>
					</div>
					<div class="col-12 col-md-4">
						<label for="zip" class="form-label">ZipCode</label>
						<InputNumber @bind-Value="Contact.ZipCode" id="zip" class="form-control" aria-label="Zip Code" placeholder="12345" />
						<ValidationMessage For="() => Contact.ZipCode" />
					</div>
					<div class="col-12 col-md-6">
						<label for="categories" class="form-label">Categories</label>
						<InputSelect @bind-Value="selectedCategoryIds" class="form-select">
							@foreach(var category in categories)
							{
							<option value="@category.Id">
								@category.Name
							</option>
							}
						</InputSelect>
					</div>
					<div class="col-12 col-md-6">
						<label class="form-label" for="birthDate">Birthday</label>
						<InputDate id="birthDate" @bind-Value="Contact.BirthDate" class="form-control" />
						<ValidationMessage For="() => Contact.BirthDate" />
					</div>
					<div class="col-12">
						<a href="contacts" class="btn btn-lg btn-outline-secondary rounded-pill">Cancel</a>
						<button type="submit" class="btn btn-lg btn-primary rounded-pill">Save</button>
					</div>
				</div>
			</div>
		</div>

	</EditForm>
}

@code {
	[Parameter, EditorRequired]
	public ContactDTO? Contact { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<ContactDTO> OnSubmit { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState>? AuthStateTask { get; set; }

	private UserInfo? userInfo;

	private string? imageError;

	private IEnumerable<CategoryDTO> categories = [];

	private int[] selectedCategoryIds = [];

	protected override async Task OnInitializedAsync()
	{
		try
		{
			userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
			//get the categories
			categories = await CategoryService.GetCategoriesAsync(userInfo!.UserId);

			//get the selected categories for this contact
			selectedCategoryIds = Contact!.Categories.Select(c => c.Id).ToArray();
		}
		catch(Exception ex)
		{
			Console.WriteLine(ex);	
		}
	}

	private async Task HandleSubmit()
	{
		Contact!.Categories = selectedCategoryIds.Select(id => categories.First(c => c.Id == id)).ToList();

		if (string.IsNullOrEmpty(Contact.ImageURL))
		{
			Contact.ImageURL = "";
		}

		await OnSubmit.InvokeAsync(Contact);
	}

	private async Task OnFileChange(InputFileChangeEventArgs changeEvent)
	{
		imageError = null;

		if(changeEvent.File is null)
		{
			Contact!.ImageURL = ImageHelper.DefaultContactImage;
		} 
		else if(changeEvent.File.Size > ImageHelper.MaxFileSize) 
		{
			imageError = "Images must be less than 5M";
		}
		else
		{
			try
			{
				Contact!.ImageURL = await ImageHelper.GetDataUrlAsync(changeEvent.File);
			}
			catch(Exception ex)
			{
				Console.WriteLine(ex);
				imageError = "Could not read the selected file.";
			}
		}
	}
}