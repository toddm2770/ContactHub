@implements IAsyncDisposable
@inject IJSRuntime JS

@if (!string.IsNullOrEmpty(Message))
{
	<div class="toast text-@Color-emphasis bg-@Color-subtle border-@Color mt-2" role="alert" area-live="assertlive" aria-atomic="true" @ref="toast">
		<div class="d-flex">
			<div class="toast-body flex-grow-1">
				@Message
			</div>
			<button type="button" class="btn-close m-2 mb-auto" data-bs-dismiss="toast" aria-label="close"></button>
		</div>
	</div>
}

@code {
	[Parameter, EditorRequired]
	public string? Message { get; set; }

	[Parameter]
	public string? Color { get; set; } = "success";

	private ElementReference? toast; //the div element passed to the js function

	private IJSObjectReference? toastJS; //the import js file

	private bool jsFailed = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				//get the js file
				toastJS = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/UI/ToastMessage.razor.js");

				//call the js function
				await toastJS.InvokeVoidAsync("initToast", toast);
			}
			catch(Exception ex)
			{
				Console.WriteLine(ex);
				jsFailed = true;
			}
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (toastJS is not null)
		{
			await toastJS.DisposeAsync();
		}
	}
}
