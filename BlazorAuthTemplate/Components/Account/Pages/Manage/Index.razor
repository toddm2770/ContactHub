@page "/Account/Manage"


@using System.ComponentModel.DataAnnotations
@using BlazorAuthTemplate.Client.Helpers
@using BlazorAuthTemplate.Helpers
@using BlazorAuthTemplate.Models
@using Microsoft.AspNetCore.Identity
@using BlazorAuthTemplate.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DBContext

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
	<div class="col-md-6">
		<EditForm Model="Input"
				  FormName="profile"
				  OnValidSubmit="OnValidSubmitAsync"
				  method="post" enctype="multipart/form-data">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" role="alert" />
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.FirstName" class="form-control" placeholder="firstname." />
				<label for="FirstName" class="form-label">First Name</label>
				<ValidationMessage For="() => Input.FirstName" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.LastName" class="form-control" placeholder="lastname." />
				<label for="LastName" class="form-label">Last Name</label>
				<ValidationMessage For="() => Input.LastName" class="text-danger" />
			</div>
			<div class="col-md-6 order-first order-md-last">
				<img src="@(user?.ImageId.HasValue == true ? $"/api/uploads/{user.ImageId}" : ImageHelper.DefaultProfilePicture)" class="p-5 pt-0 img-fluid rounded-3" id="imagePreview" />
				<label class="form-label" for="image"> Profile Picture</label>
				<input type="file" class="form-control"
					   accept=".jpg,.jpeg,.png,.svg,.gif"
					   name="Input.ProfilePicture"
					   onchange="document.getElementById('imagePreview').src = window.URL.createObjectURL(this.files[0])" />
			</div>
			<button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
		</EditForm>
	</div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        Input.FirstName = string.IsNullOrEmpty(Input.FirstName) ? user.FirstName : Input.FirstName;
        Input.LastName = string.IsNullOrEmpty(Input.LastName) ? user.LastName : Input.LastName;

    }

    private async Task OnValidSubmitAsync()
    {

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        if (Input.ProfilePicture != null)
        {

            try
            {
                ImageUpload newImage = await UploadHelper.GetImageUploadAsync(Input.ProfilePicture);
                await DBContext.Images.AddAsync(newImage);

                ImageUpload? oldImage = await DBContext.Images.FirstOrDefaultAsync(i => i.Id == user.ImageId);
                if (oldImage != null)
                {
                    DBContext.Images.Remove(oldImage);
                }

                user.Image = newImage;
                user.ImageId = newImage.Id;

                DBContext.Users.Update(user);

                await DBContext.SaveChangesAsync();
            }
            catch (IOException)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("The image could not be uploaded.  Profile pictures must be 5MB or less", HttpContext);
                throw;
            }

        }

        await UserManager.UpdateAsync(user);

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First Name")]
        public string? FirstName { get; set; }

        [Required]
        [Display(Name = "Last Name")]
        public string? LastName { get; set; }

        [Display(Name = "Profile Picture")]
        public IFormFile? ProfilePicture { get; set; }
    }
}
